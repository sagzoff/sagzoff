runge_kutte::

function[ ]=RK4(x0,xn,y0,h,f)
x=x0:h:xn;
n=length(x)-1;
y(1)=y0;
for i=1:n
 k1=f(x(i),y(i));
 k2=f(x(i)+h/2,y(i)+h*k1/2);
 k3=f(x(i)+h/2,y(i)+h*k2/2);
 k4=f(x(i)+h,y(i)+h*k3);
 y(i+1)=y(i)+(h/6)*(k1+2*k2+2*k3+k4);
end
fprintf('Approximate solution at x=%f is y=%f \n',xn,y(end))
plot(x,y,'*')
hold on
u=dsolve('Dy=y-x^2+1','y(0)=.5','x');
u=eval(u);
fprintf('The solution obtained using dsolve at x=%f is u=%f \n',xn,u(end))
plot(x,u,'r')
end

Input:
>> x0=0;y0=0.5;xn=1;h=0.25;
>> f=@(x,y) y-x^2+1;
>> RK4(x0,xn,y0,h,f)

milnes_method::

function []=MilnesMethod(x0,y0,xn,h,f)
x=x0:h:xn;
n=length(x)-1;
y = zeros(1,n+1);
y(1)=y0;
for i=1:3
 K1=f(x(i),y(i));
 K2=f(x(i)+h/2,y(i)+h*K1/2);
 K3=f(x(i)+h/2,y(i)+h*K2/2);
 K4=f(x(i)+h,y(i)+h*K3);
 y(i+1)=y(i)+(h/6)*(K1+2*K2+2*K3+K4);
end
for i=4:n 
 y(i+1)=y(i-3)+(4*h/3)*(2*f(x(i),y(i))- f(x(i-1),y(i-1))+2*f(x(i-2),y(i-2))); 
%predictor formula
 y(i+1)=y(i-1)+(h/3)*(f(x(i+1),y(i+1))+4*f(x(i),y(i))+f(x(i-1),y(i-1))); 
% Corrector formula
end
fprintf('Approximate solution at x=%f is y=%f \n',xn,y(end))
plot(x,y,'*')
hold on
u=dsolve('Dy=y-x^2+1','y(0)=.5','x');
u=eval(u);
fprintf('The solution obtained using dsolve at x=%f is u=%f \n',xn,u(end))
plot(x,u,'r')
end

Input:
>> x0=0;y0=0.5;xn=1;h=0.25;
>> f=@(x,y) y-x^2+1;
>> MilnesMethod(x0,y0,xn,h,f)

finite diffrence to find numerical solution for heat equation::

function [u] = FTCS(x0,xm,tn,h,k,c2,f)
alpha=c2*k/h^2;
if alpha >1/2
 fprintf('The method fails')
else
x=x0:h:xm;
m=length(x);
t=0:k:tn;
n=length(t);
u=zeros(m,n);
u(:,1)=f(x);
for j=1:n-1
 for i=2:m-1
 u(i,j+1)= alpha*(u(i-1,j)+ u(i+1,j))+(1-2* alpha )*u(i,j);
 end
end
surf(t,x,u)
xlabel('t')
ylabel('x')
zlabel('u')
end
end

input:
 x0=0; xm = 8; tn = 0.5; h = 1; k=1/8; c2=4;
>> f = @(x) 4*x -0.5*x.^2;
>> [x,t,u] = FTCS(x0,xm,tn,h,k,c2,f)

wave equation::

function [u] = CTCS_wave(t0,tn,x0,xm,h,k,c, f, g)
r = c*k/h;
if r>1
 fprintf('The method fails')
else
x=x0:h:xm;
t=t0:k:tn;
m=length(x);
n=length(t);
u=zeros(m,n);
u(:,1)=f(x);
for i=2:m-1
 u(i,2)=(1-r^2)*u(i,1)+0.5*(r^2*(u(i-1,1)+u(i+1,1)))+k*g(x(i));
end
for j=2:n-1
 for i=2:m-1
 u(i,j+1)=2*(1-r^2)*u(i,j)+r^2*(u(i-1,j)+u(i+1,j))-u(i,j-1);
 end
end
surf(t,x,u)
end
end

input:
>> t0=0; tn=1; x0=0; xm=1; h=1/4; k=1/4; c=1;
>> f= @(x) 0*x; g = @(x) sin(pi*x);
>> [x,t,u] = CTCS_wave(t0,tn,x0,xm,h,k,c, f, g)

solve the ivp y''-2y-p=-2 in inbuilt function?

f=@(t,y) [y(2);2*y(2)-y(1)-2];
y0=[1;1];
[ts,ys]=ode45(f,[0,1],y0);
plot(ts,ys(:,1),'*','LineWidth',2)
grid on


solve the ivp dy/dx=x+y,y(0)=1,-1<x<1 by using inbuilt code??
y0=1;
xspan=[-1,1];
f=@(x,y) y+x;
[x,y]=ode45(f,xspan,y0);
plot(x,y,'+','LineWidth',2)

 Obtain the polynomial of degree one that fits the following data
𝑥 = [1 2 3 4 5] 𝑦 = [1.1 2.3 5.6 6.9 7.5]

x=[1 2 3 4 5];
y=[1.1 2.3 5.6 6.9 7.5];
p=polyfit(x,y,1);
f=@(x) p(1)*x+p(2);
plot(x,y,'*',x,f(x),'r')


dsolve and odi double graph
y=dsolve('Dy=x^3*y^2-4*y/x','y(2)=-1','x');
x=2:0.05:3;
z=eval(y);
plot(x,z,'r');
hold on
y0=-1;
f=@(x,y) x.^3.*y.^2-4.*y./x;
span=[2 3];
[x,y]=ode45(f,span,y0);
plot(x,y,'*k')
